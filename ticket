#!/usr/bin/perl

# Script to support the "spontaneous branches" workflow in Darcs: see
# http://wiki.darcs.net/SpontaneousBranches
# Copyright 2010 Miles Gould
# This program is free software, available under the same terms as Perl itself.

use warnings;
use strict;
use 5.010;
use Cwd;
use File::Spec;

# Find the _darcs directory
sub find_darcsdir {
	my $start = getcwd();
	while (! -d "_darcs") {
		die "Not in a darcs repository"
			if getcwd() eq File::Spec->rootdir();
		chdir(File::Spec->updir());
	}
	my $darcsdir=File::Spec->catfile(getcwd, "_darcs");
	chdir $start;
	return $darcsdir
}

# Name of the file containing the ticket name
sub ticket_file {
	my $darcsdir = find_darcsdir();
	return File::Spec->catfile($darcsdir, "ticket");
}

# Read the name of the current ticket from _darcs/ticket
sub ticket_name {
	open (my $fh, '<', ticket_file())
		or die "Couldn't open _darcs/ticket: $!";
	my $ticket;
	{
		local $/ = undef; # slurp entire file contents;
		$ticket = <$fh>;
	}
	chomp $ticket; # strip trailing newlines
	close $fh;
	return $ticket;
}

sub record {
	my $ticket = ticket_name();
	say "Current ticket name is $ticket";
	print "Name of patch: ";
	chomp(my $message = <STDIN>);
	system("darcs", "record", "-m", "$ticket $message", @_);
}

sub current {
	my $ticket = ticket_name();
	say $ticket;
}


sub new_ticket {
	print "Name of new ticket: ";
	my $ticket = <STDIN>;
	open (my $fh, '>', ticket_file())
		or die "Couldn't open _darcs/ticket: $!";
	print $fh $ticket;
	close $fh;
}

my $command = shift @ARGV;
given ( $command ) {
	when (/record/)		{ record(@ARGV); }
	when (/current/)	{ current(@ARGV); }
	when (/new/) 		{ new_ticket(@ARGV); }
}
